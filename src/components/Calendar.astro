<div id="calendar-view">
  <div id="calendar-buttons">
    <button id="add-event-button" class="hidden">Add Evento</button>
    <button id="back-to-month" class="hidden">Volver al Mes</button>
  </div>
  <div id="calendar-month" class="calendar"></div>
  <div id="calendar-week" class="calendar hidden"></div>

  <!-- Popup para añadir evento -->
  <div id="event-popup" class="popup hidden">
    <h2>Añadir Evento</h2>
    <form id="event-form">
      <label for="event-name">Nombre del evento:</label>
      <input type="text" id="event-name" required />
      <br /><br />

      <label for="event-day">Día de la semana:</label>
      <select id="event-day">
        <option value="0">Lunes</option>
        <option value="1">Martes</option>
        <option value="2">Miercoles</option>
        <option value="3">Jueves</option>
        <option value="4">Viernes</option>
        <option value="5">Sabado</option>
        <option value="6">Domingo</option>
      </select>
      <br /><br />

      <label for="event-hour">Hora:</label>
      <select id="event-hour">
        <option value="0">00:00</option>
        <option value="1">01:00</option>
        <option value="2">02:00</option>
        <option value="3">03:00</option>
        <option value="4">04:00</option>
        <option value="5">05:00</option>
        <option value="6">06:00</option>
        <option value="7">07:00</option>
        <option value="8">08:00</option>
        <option value="9">09:00</option>
        <option value="10">10:00</option>
        <option value="11">11:00</option>
        <option value="12">12:00</option>
        <option value="13">13:00</option>
        <option value="14">14:00</option>
        <option value="15">15:00</option>
        <option value="16">16:00</option>
        <option value="17">17:00</option>
        <option value="18">18:00</option>
        <option value="19">19:00</option>
        <option value="20">20:00</option>
        <option value="21">21:00</option>
        <option value="22">22:00</option>
        <option value="23">23:00</option>
      </select>
      <br /><br />

      <button type="submit">Add</button>
      <button type="button" id="cancel-button">Cancelar</button>
    </form>
  </div>

  <!-- Overlay -->
  <div id="overlay" class="overlay hidden"></div>
</div>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100vh;
    width: 100vw;
    overflow: hidden;
  }

  .calendar {
    display: grid;
    gap: 2px;
    width: 95%;
    height: 80%;
  }

  .hidden {
    display: none;
  }

  #calendar-month {
    grid-template-columns: repeat(7, 1fr);
    grid-template-rows: auto;
    height: 100%;
  }

  #calendar-week {
    grid-template-columns: 100px repeat(7, 1fr);
    margin-top: 20px;
    height: 120%;
    gap: 15px;
  }

  .day,
  .hour {
    border: 1px solid #e0e0e0;
    text-align: center;
    background-color: #f8f8f8;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 15px;
    height: 100%;
    font-size: 1em;
  }

  .day {
    cursor: pointer;
  }

  .has-event {
    background-color: red;
  }

  .hours-column {
    display: flex;
    flex-direction: column;
    gap: 15px;
    text-align: center;
    background-color: #f0f0f0;
  }

  .hours-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .hour {
    height: 120px;
    padding: 20px;
    border-top: 1px solid #ddd;
    display: flex;
    align-items: center;
  }

  .event {
    background-color: #7fbc41;
    color: white;
    border-radius: 4px;
    padding: 5px;
    text-align: center;
    width: 90%;
    margin: 10px auto;
    font-size: 1em;
    position: relative;
  }

  .delete-button {
    position: absolute;
    top: 5px;
    right: 5px;
    background-color: red;
    color: white;
    border: none;
    border-radius: 3px;
    cursor: pointer;
    font-size: 0.8em;
    padding: 2px 5px;
  }

  #calendar-view {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
  }

  #calendar-buttons {
    margin: 20px;
    display: flex;
    justify-content: space-between;
    width: 95%;
  }

  button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    background-color: #007bff;
    color: white;
    cursor: pointer;
    transition:
      background-color 0.3s,
      transform 0.3s;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    font-size: 1em;
  }

  button:hover {
    background-color: #0056b3;
    transform: translateY(-3px);
  }

  button:active {
    transform: translateY(0);
  }

  .popup {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
    z-index: 10;
  }

  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.3);
    z-index: 5;
  }

  .day-header {
    font-weight: bold;
    background-color: #f0f0f0;
    padding: 15px;
    text-align: center;
    font-size: 1.2em;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    let selectedDate = null;

    const calendarMonth = document.getElementById("calendar-month");
    const calendarWeek = document.getElementById("calendar-week");
    const addEventButton = document.getElementById("add-event-button");
    const backToMonthButton = document.getElementById("back-to-month");
    const eventPopup = document.getElementById("event-popup");
    const overlay = document.getElementById("overlay");
    const eventForm = document.getElementById("event-form");

    const events = {}; // Objeto para almacenar eventos

    // Generar la vista mensual (FUNCIONALIDAD 1)
    function generateMonth(year, month) {
      calendarMonth.innerHTML = ""; //limpiamos contenido
      const daysInMonth = new Date(year, month + 1, 0).getDate();

      for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(year, month, day);
        const dayDiv = document.createElement("div");
        dayDiv.className = "day";
        dayDiv.textContent = day.toString();

        // Cambiar vista al hacer click en un dia
        dayDiv.addEventListener("click", () => {
          selectedDate = date;
          generateWeek(selectedDate);
          switchView("week");
        });

        if (
          Object.keys(events).some(
            (key) => key.split("-")[0] === date.toDateString(),
          )
        ) {
          dayDiv.classList.add("has-event");
        }

        calendarMonth.appendChild(dayDiv);
      }
    }

    // Generar la vista semanal
    function generateWeek(startDate) {
      calendarWeek.innerHTML = "";
      const start = new Date(startDate);
      const dayOffset = (start.getDay() + 6) % 7;
      start.setDate(start.getDate() - dayOffset);

      // columnas para los días de la semana
      const dayNames = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
      for (let i = 0; i < 7; i++) {
        const day = new Date(start);
        day.setDate(start.getDate() + i);
        const dayColumn = document.createElement("div");
        dayColumn.className = "day";

        // Encabezado del día
        const dayHeader = document.createElement("div");
        dayHeader.className = "day-header";
        dayHeader.textContent = `${dayNames[i]} ${day.getDate()}`;
        dayColumn.appendChild(dayHeader);

        const hoursContainer = document.createElement("div");
        hoursContainer.className = "hours-container";

        for (let hour = 0; hour < 24; hour++) {
          const eventKey = `${day.toDateString()}-${hour}`;
          const hourDiv = document.createElement("div");
          hourDiv.className = "hour";

          // Mostrar el evento si existe
          if (events[eventKey]) {
            const eventDiv = document.createElement("div");
            eventDiv.className = "event";
            eventDiv.textContent = events[eventKey];

            // Crear botón de eliminación
            const deleteButton = document.createElement("button");
            deleteButton.className = "button";
            deleteButton.textContent = "X";
            deleteButton.addEventListener("click", () => deleteEvent(eventKey));

            eventDiv.appendChild(deleteButton);
            hourDiv.appendChild(eventDiv);
          }

          hoursContainer.appendChild(hourDiv);
        }

        dayColumn.appendChild(hoursContainer);
        calendarWeek.appendChild(dayColumn);
      }
    }

    // Cambiar entre la vista mensual y semanal
    function switchView(view) {
      if (view === "week") {
        calendarMonth.classList.add("hidden");
        calendarWeek.classList.remove("hidden");
        addEventButton.classList.remove("hidden");
        backToMonthButton.classList.remove("hidden");
      } else {
        calendarMonth.classList.remove("hidden");
        calendarWeek.classList.add("hidden");
        addEventButton.classList.add("hidden");
        backToMonthButton.classList.add("hidden");
      }
    }

    // Mostrar el popup para añadir evento
    addEventButton.addEventListener("click", () => {
      eventPopup.classList.remove("hidden");
      overlay.classList.remove("hidden");
    });

    // Cancelar el popup
    document.getElementById("cancel-button").addEventListener("click", () => {
      eventPopup.classList.add("hidden");
      overlay.classList.add("hidden");
    });

    // Añadir el evento
    eventForm.addEventListener("submit", (e) => {
      e.preventDefault();
      console.log("Eventos actuales ", events);

      // Obtener los valores del formulario
      const eventNameElement = document.getElementById("event-name");
      const eventDayElement = document.getElementById("event-day");
      const eventHourElement = document.getElementById("event-hour");

      if (eventNameElement && eventDayElement && eventHourElement) {
        const eventName = (
          document.getElementById("event-name") as HTMLInputElement
        ).value;
        const eventDay = parseInt(
          (document.getElementById("event-day") as HTMLSelectElement).value,
          10,
        );
        const eventHour = parseInt(
          (document.getElementById("event-hour") as HTMLSelectElement).value,
          10,
        );

        if (eventName && !isNaN(eventDay) && !isNaN(eventHour)) {
          // Obtener el día de la semana seleccionado y crear la clave del evento
          const start = new Date(selectedDate); // Hacer una copia de la fecha seleccionada para no modificar la original
          const dayOffset = (start.getDay() + 6) % 7; // Calcular días retroceder para llegar al lunes de esa semana
          start.setDate(start.getDate() - dayOffset + eventDay); // Ajustar la fecha al día específico de la semana seleccionado en el formulario

          const eventKey = `${start.toDateString()}-${eventHour}`; // Crear una clave única para el evento usando la fecha y la hora
          events[eventKey] = eventName; // Asignar el nombre del evento a la clave generada en el objeto 'events'

          // Ocultar el popup y la superposición
          eventPopup.classList.add("hidden");
          overlay.classList.add("hidden");

          // Actualizar la vista semanal y mensual
          generateMonth(currentYear, currentMonth);
          generateWeek(selectedDate);
        } else {
          console.error(
            "Por favor, completa todos los campos antes de añadir el evento.",
          );
        }
      } else {
        console.error("Error: No se pudo obtener el elemento del formulario.");
      }
    });

    // Botón para volver al mes
    backToMonthButton.addEventListener("click", () => {
      switchView("month");
    });

    // Función para eliminar un evento
    function deleteEvent(eventKey) {
      if (events[eventKey]) {
        delete events[eventKey];
        console.log("Evento eliminado:", eventKey);
        console.log("Eventos actuales después de eliminar:", events); // Mostrar estructura de eventos actualizada
        generateWeek(selectedDate); // Actualizar la vista semanal después de eliminar
      }
    }

    // Inicializar la vista mensual
    generateMonth(currentYear, currentMonth);
  });
</script>
